DEPTH = 2048; 			% Memory depth and width are required %
						% DEPTH is the number of addresses %
WIDTH = 16; 			% WIDTH is the number of bits of data per word %
						% DEPTH and WIDTH should be entered as decimal numbers %
ADDRESS_RADIX 	= BIN; 	% Address and value radixes are required %
DATA_RADIX 		= BIN; 	% Enter BIN, DEC, HEX, OCT, or UNS; unless %
						% otherwise specified, radixes = HEX %
-- Specify values for addresses, which can be single address or range
CONTENT
BEGIN

00000000000	: 1100000000000000;			%		ANDI R0,  #0												%
00000000001	: 1100000000001101;			%		ORI  R0,  #3	--initialize loop counter					%
00000000010	: 1100111110000000;		 	%		ANDI R31, #0												%
00000000011	: 1100111110001101;			%		ORI  R31, #3	--initialize data memory index				%													
00000000100	: 1000000101111100;		 	%loop:	LD	 R2,  R31	--load value from 0(R31) into R2			%
00000000101 : 0000000000000000;			%		[mem address]												%
00000000110	: 1100000010000000;			%		ANDI R1,  #0	--arbitrarily just set R1 each loop			%
00000000111	: 1100000100000011;		 	%		NOT	 R2			--arbitrarily just negate R2				%
00000001000 : 1100000010101001;			%		ORI	 R1,  #10												%
00000001001	: 0001000101111100;			%		SUB  R2,  R31 												%
00000001010	: 1100000000000101;			%		SUBI R0,  #1												%
00000001011	: 1011000100000001;			%		IOW  R2														%
00000001100	: 1000000011111110;			%		ST 	 R1,  R31	--store R1 value in data_mem(R31)			%
00000001101	: 0111111110000100;			%		SLA R31, R1													%
00000001110	: 1010000000000000;			%		BNEZ R0,  loop 												%
00000001111 : 0000000000000100;			%		[branch address]											%
00000010000	: 1001000000000000;			%done:	JUMP done													%
00000010001 : 0000000000010000;			%		[jump address]												%

END;