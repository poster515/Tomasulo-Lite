% Written by: Joseph Post	%
% This code will modify R0 and R31 to a value of 3, store R0 in 0x0000(R31), then load 0x0000(R31) in R1 %

DEPTH = 2048; 			% Memory depth and width are required %
						% DEPTH is the number of addresses %
WIDTH = 16; 			% WIDTH is the number of bits of data per word %
						% DEPTH and WIDTH should be entered as decimal numbers %
ADDRESS_RADIX 	= BIN; 	% Address and value radixes are required %
DATA_RADIX 		= BIN; 	% Enter BIN, DEC, HEX, OCT, or UNS; unless %
						% otherwise specified, radixes = HEX %
-- Specify values for addresses, which can be single address or range
CONTENT
BEGIN

00000000000	: 1100101010000000;			%				ANDI R21, #0												% 
00000000001	: 1100101010010101;			%				ORI  R21, #5			--R21 = 5							% 
00000000010	: 1100000000000000;			%				ANDI R0,  #0												%
00000000011	: 1100000000001101;			%				ORI  R0,  #3			--R0 = 3							%
00000000100	: 1101000110000000;			%				CP   R0,  R3			--R3 = 3							% 
00000000101	: 0001000000001001;			%				SUBI R0,  #2			--R0 = 1							% 
00000000110	: 0011000000000000;			%				DIV  R0,  R0			--R0 = 1							% 
00000000111	: 0111000001010101;			%				SFRA R0,  R21			--R0 = 0							% 
00000001000	: 1010000000000000;			%				BNEZ R0, n_zero												%
00000001001	: 0000000000010000;			%				[n_zero address]											%
00000001010 : 0101101011010100;			%				ROT  R21, R21			--R21 = 160							% 
00000001011	: 1000101011010110;			%				ST 	 R21,  0x0001(R21)  --store value in R0 in 0x0004		% 
00000001100 : 0000000000000001;			%																			% 
00000001101	: 1000000011010100;			%				LD   R1,  0x0001(R21)  	--R1 = 5							%
00000001110 : 0000000000000001;			%																			%
00000001111	: 1001000000011110;			%	zero		JUMP zero													%
00000010000	: 1100000000001101;			%	n_zero	:	ORI  R0,  #3			--R0 = 3							%
00000010001	: 1001000000100010;			%	done:		JUMP done													% 

END;